<?php// No direct access to this filedefined('_JEXEC') or die('Restricted access'); // import Joomla view libraryjimport('joomla.application.component.view'); /** * HTML View class for the HelloWorld Component */class ReferidosViewMisComisiones extends JView{			public $model_comision;		protected $no_pagadas = array();		protected $pagadas = array();        // Overwriting JView display method        function display($tpl = null)         {                // Assign data to the view                $this->model_comision = new ReferidosModelComision();                 // Check for errors.                if (count($errors = $this->get('Errors')))                 {                        JError::raiseError(500, implode('<br />', $errors));                        return false;                }								//obtengo comisiones no pagadas				$this->getNoPagas();								//obtengo las comisiones pagadas				$this->getPagas();				                // Display the view                parent::display($tpl);        }				/**		* comisiones no pagadas, incluso las de los planes vencidos		*/		protected function getNoPagas(){						$model_user = new ReferidosModelUser();			$user = JFactory::getUser();						$model_user->instance( $user->get( 'id' ) );						$wheres_plan = array(				0 => ( object ) array(						'key' => 'a.estado_plan'					,	'condition' => ' <> '					,	'value' => '0'					,	'glue' => ''				) 			);			$planes = $model_user->getUserPlanes( $wheres_plan );						$id_planes_user = array();			foreach( $planes as $key=>$plan){				$id_planes_user[] = $plan->id_user_plan;			}			unset( $plan );						$wheres = array(				0 => ( object ) array(						'key' => 'id_user_plan'					,	'condition' => ' IN'					,	'value' => '('. implode( ',' , $id_planes_user) .')'					,	'glue' => ' AND '					)				,				1 => ( object ) array(						'key' => 'estado_pago'					,	'condition' => ' = '					,	'value' => '0'					,	'glue' => ''					)							);			$model_comision = new ReferidosModelComision();			$this->no_pagadas = $model_comision->getObjects( $wheres );		}				/**		* total de comisiones pagadas, todos los estados de los planes		*/		protected function getPagas(){						$model_user = new ReferidosModelUser();			$user = JFactory::getUser();						$model_user->instance( $user->get( 'id' ) );						$wheres_plan = array(				0 => ( object ) array(						'key' => 'a.estado_plan'					,	'condition' => ' <> '					,	'value' => '0'					,	'glue' => ''				) 			);			$planes = $model_user->getUserPlanes( $wheres_plan );						$id_planes_user = array();			foreach( $planes as $key=>$plan){				$id_planes_user[] = $plan->id_user_plan;			}			unset( $plan );						$wheres = array(				0 => ( object ) array(						'key' => 'id_user_plan'					,	'condition' => ' IN'					,	'value' => '('. implode( ',' , $id_planes_user) .')'					,	'glue' => ' AND '					)				,				1 => ( object ) array(						'key' => 'estado_pago'					,	'condition' => ' = '					,	'value' => '1'					,	'glue' => ''					)							);			$model_comision = new ReferidosModelComision();			$this->pagadas = $model_comision->getObjects( $wheres );					}				/**		* obtengo la configuracion para las comisiones		* @params { void }		* @return { void }		*/		protected function getConfComision(){						return $this->model_comision->getConfComision();		}				/**		* metodo para calcular la fechas siguientes de corte, y de pago		*/		public function calculaNextDate( $numSemanas , $semana_per , $dia_per ){			//calcula la primera fecha de corte			$anio_act = date( 'Y' );			$mes_act = date( 'm' );						$fecha = date( 'Y-m-d H:m:i', strtotime( "$anio_act-W".$numSemanas[ $semana_per-1 ]."-".$dia_per ) );			$mes = date( 'm', strtotime( "$anio_act-W".$numSemanas[ $semana_per-1 ]."-".$dia_per ) );			if( $mes != $mes_act )				$fecha = date( 'Y-m-d H:m:i', strtotime( "$anio_act-W".$numSemanas[ $semana_per ]."-".$dia_per ) );							return $fecha;			}}