<?php // no direct accessdefined( '_JEXEC' ) or die( 'Restricted access' );  jimport( 'joomla.application.component.model' );// Initializes the Classclass ReferidosModelDefault extends JModel {		/**	 * Pqrs product Id	 * @var int	 */	var $id;		/**	 * product state	 * @var int	 */	var $state;		/**	 * fecha de creacion	 * @var date	 */	var $created;		/**	 * quien creo	 * @var int	 */	var $created_by;		/**	 * fecha de modificacion	 * @var date	 */	var $modified;		/**	 * quien modifico	 * @var int	 */	var $modified_by;		/**	 * Pqrs tabla	 * @var string	 */	var $tabla = '';		/**	 * Cache of results, data, queries	 * @var unknown	 */	var $data = array();		/**	* array filter	*/	var $filters = array();		/*	* Attribute	* bool	*/	var $exists = false;		/*	* Attribute	* bool	*/	var $insertId;		/**	 * Constant for table	 * @var string	 */	const TABLE = 'undefined';		//constante base para los filtros	const FILTER_STATE = 'undefined';		/**	 * Attributes Map	 * @var array	 */	protected $attrs_map = array( 			'id'			,	'state'		,	'created'		,	'created_by'		,	'modified'		,	'modified_by'		);		/**	 * Constructor	 * 	 * @param { array || int } the args to instance the model or the single id	 * 	 */		public function instance( $config = NULL ){				if( is_numeric( $config ) )			$config = array( $this->attrs_map[ 0 ] => $config );				if( ! is_array( $config ) )			return;				// Get existing object if the id was passed through		return $this->fill( $config );	}		/**	 * Fill the model attributes with the passed arguments.	 *	 * @param { arr } Object arguments	 */	protected function fill( $args = NULL ){		if ( ! is_array( $args ) )			return false;					// Get object in DB					if ( is_numeric( $args[ $this->attrs_map[ 0 ] ] ) ){			$object = $this->getObject( $args[ $this->attrs_map[ 0 ] ] );						if( is_object( $object ) ){				foreach ( $this->attrs_map as $attr ) {										if ( isset( $object->$attr ) )						$this->$attr = $object->$attr;				}			}		}			// Merge attributes	when id is not passed through		foreach ( $this->attrs_map as $attr ) {			if ( isset( $args[ $attr ] ) )				$this->$attr = $args[ $attr ];		}		// Set exists to true.		$this->exists = true;		}			/**	 * Get a single Object	 * 	 * @param { int } the id or attributes of the Object.	 * @return { bool/object } the object returned or false otherwise	 */	public function getObject( $id = 1 ){				if( ! is_numeric( $id ) )			return false;				// Instance databse		$db = JFactory::getDbo();		$query = $db->getQuery( true );				$c = get_called_class();  			//var_dump( $c::TABLE ); die();				//var_dump( $c ); die();		$query->select( '*' );		$query->from( $c::TABLE );		$query->where( $this->attrs_map[ 0 ].' = ' . $id );				$db->setQuery( $query );				return $db->loadObject();			}		/**	 * Get Objects collection	 *	 * @param { int } the id or attributes of the Object.	 * @return { bool/object } the object returned or false otherwise	 **/	public function getObjects( $wheres = NULL , $prlimits = array() ){				if( !isset( $prlimits[ 'limitstart' ] ) )			$prlimits[ 'limitstart' ] = '';					if( !isset( $prlimits[ 'limit' ] ) )				$prlimits[ 'limit' ] = '';				$result = array();				if( ! is_array( $wheres ) )			$wheres = array();				// Verifies if data already contains a collection		//if( empty( $this->data ) ){						$query = $this->buildQuery( $wheres );			$this->data = $this->_getList( $query , $prlimits[ 'limitstart' ] , $prlimits[ 'limit' ] );		//}						foreach ( $this->data as $obj ){			$args = array();						foreach ( $obj as $key => $attr ) {								$args[ $key ] = $obj->$key;			}						$estaClase = get_class( $this );				$object = new $estaClase();			$object->fill( $args );			array_push( $result, $object );					}			return $result;		}	/**	 * Save a new object or update an exist.	 *	 * @param { string } the type of the response	 * ( string returns the error string or "" )	 * ( bool return false or true )	 * ( object returns the response with error_message, status true or false )	 * @return { string  } the query string calling the insert query	 *	 */	public function save( $return = 'string' ){		// Initialize		$db = JFactory::getDbo();		$response = ( object ) array();		$model = ( object ) array();		if( ! is_string( $return ) )			$return = 'string';		// Fetch the model attributes with the $model's var		foreach ( $this->attrs_map as $attribute ) {			$model->$attribute = $this->$attribute;		}				$c = get_called_class(); 						$id =  $this->attrs_map[0];		// If id exists, update the model		// If id doesn't exist, insert a new row in database		if( $model->$id == NULL || $model->$id == "" ){			if (! $db->insertObject( $c::TABLE, $model ) ) {				if( $return == 'string' ){					return "No se pudo guardar el object. " . $db->stderr();				}				if( $return == 'bool' ){					return false;				}				if( $return == 'object' ){					$response->status = false;					$response->error = "No se pudo guardar el object. " . $db->stderr();					return $response;				}			}			$this->insertId = $db->insertid();			if( $return == 'string' ){				return "";			}			if( $return == 'bool' ){				return true;			}			if( $return == 'object' ){				$response->status = true;				$response->error = "";				return $response;			}		}		// Update		if ( ! $db->updateObject( $c::TABLE, $model, $this->attrs_map[ 0 ], false ) ) {						if( $return == 'string' ){				return "No se pudo actualizar el object. " . $db->stderr();			}			if( $return == 'bool' ){				return false;			}			if( $return == 'object' ){				$response->status = false;				$response->error = "No se pudo guardar el object. " . $db->stderr();				return $response;			}		}		if( $return == 'string' ){			return "";		}		if( $return == 'bool' ){			return true;		}		if( $return == 'object' ){			$response->status = true;			$response->error = "";			return $response;		}	}		/**	 * Delete object from database	 *	 * @param { array || int } the id of the object or array that contains the id	 * @return { bool/object } the object returned or false otherwise	 */	public function delete(){				$firstkey = $this->attrs_map[ 0 ];			if( ! is_numeric( $this->$firstkey ) )			return false;				// Delete existing object if the id was passed through		$c = get_called_class();  		$query = "DELETE FROM ". $c::TABLE ." WHERE ". $this->attrs_map[ 0 ] . " = " . $this->$firstkey;		$db = JFactory::getDbo();		$db->setQuery( $query );			return $db->query();		}	/**	 * Publish or unpublish the object	 * @param { string } the type of the response	 * ( string returns the error string or "" )	 * ( bool return false or true )	 * ( object returns the response with error_message, status true or false )	 * @return { string  } the state after change	 *	 */	public function publish( $return = 'string' ){		$db = JFactory::getDbo();				$firstkey = $this->attrs_map[ 0 ];		$secondkey = $this->attrs_map[ 1 ];				$this->$secondkey = ( $this->$secondkey == 1 ) ? 0 : 1;		// Update		$std = new stdClass();		$std->$firstkey = $this->$firstkey;		$std->$secondkey = $this->$secondkey;				$c = get_called_class();  		if (! $db->updateObject( $c::TABLE, $std, $this->attrs_map[ 0 ], false ) ) {						if( $return == 'string' ){				return "No se pudo actualizar el object. " . $db->stderr();			}			if( $return == 'bool' ){				return false;			}			if( $return == 'object' ){				$response->status = false;				$response->error = "No se pudo actualizar el object. " . $db->stderr();				return $response;			}		}		if( $return == 'string' ){			return "";		}		if( $return == 'bool' ){			return true;		}		if( $return == 'object' ){			$response->status = true;			$response->error = "";			return $response;		}	}		// Helpers for the same Model	// Next methods are utilities no core methods, therefore they all are protected		public function getParams(){		$mainframe = JFactory::getApplication();		$c = get_called_class(); 				foreach ( $this->attrs_map as $key => $param ) {			$_param = ( object ) array();			$_param->key = $param;			$_param->value = $mainframe->getUserState( $c::FILTER_STATE . $param );			$_param->type = gettype( $_param->value );			array_push( $this->filters, $_param );		}	}	public function setParams(){		$mainframe = JFactory::getApplication();		$c = get_called_class();				foreach ( $this->attrs_map as $key => $param ) {			$mainframe->setUserState( $c::FILTER_STATE . $param, JRequest::getVar( $param ) );		}		$this->getParams();	}	public function cleanParams(){		$mainframe = JFactory::getApplication();		$c = get_called_class();				foreach ( $this->attrs_map as $key => $param ) {			$mainframe->setUserState( $c::FILTER_STATE . $param, "" );		}		$this->getParams();	}		/**	 * Build a query for collection. Filters query are included.	 *	 * @param { array } wheres clausule. Clausule must be { key: 'value', value: 'value', condition:'=', glue: 'AND || OR' }	 * @return { string } the query string calling the collection	 *	 */	protected function buildQuery( $wheres = NULL ){		// Validation		if( ! is_array( $wheres ) )			$wheres = array();		// Initialize		$db = JFactory::getDbo();		$query  = $db->getQuery(true);		// Get the filters		$this->getParams();				$c = get_called_class();  				// Query base				$query->select( "*" );		$query->from( $c::TABLE );				// Wheres appending		foreach ( $wheres as $key => $clausule ) {						if( ! is_object( $clausule ) )				continue;			$query->where( $clausule->key . $clausule->condition . $clausule->value, $clausule->glue );		}		//Filters appending				foreach ( $this->filters as $key => $filter ) {			if( $filter->type == 'string' && $filter->value != '' ){				$query->where( $filter->key . " LIKE '%$filter->value%'" );				continue;			}						if( $filter->value != '' ){								$query->where( $filter->key . " = " . $filter->value );				}		}				return $query;	}		/**	* obtiene una consulta a una tabla que se le pasa como parametro y sus filtros	* @param{ string , array } el monbre de la tabla , el array de objectos con las condiciones	* @return{ object }		*/	public function getRegTabla( $table = NULL , $wheres = NULL){				$db = JFactory::getDBo();				if( ! is_string( $table ) )			return array();				if( ! is_array( $wheres ) )			$wheres = array();		 		$query_table = "SELECT  a.* FROM " . $table . ' AS a';				$consultas = '';				if( count($wheres) > 0 ){			$consultas .= ' WHERE ';			foreach( $wheres as $key => $obj ){								$consultas .= $obj->key . $obj->condition . $obj->value . $obj->glue;			}		}				$query_table .= $consultas;				//var_dump( $query_table ); die();				$db->setQuery( $query_table );		return $db->loadObjectList();	}		 /*	 * obtener usuario que creo o el que actualizo el registro	 * @param { array } un array de objetos con las consultas	 * @return { object , array } objeto o arrray de objectos	 */	 public function getUserCreate( $wheres = NULL ){		 		 if( ! is_array( $wheres ) )		 	$wheres = array();		 		 $db = JFactory::getDbo();		 $query = $db->getQuery(true);		 		 $query->select('*');		 $query->from( '#__users' );		 		 $query->where( 'id = '. $this->created_by );		 		 foreach( $wheres as $key=>$where ){			 			 if( !is_object( $where ) )			 	continue;			 			 $query->where( $where->key . $where->condition . $where->value . $where->glue );		 }		 		 $db->setQuery( $query );		 		 		return $db->loadObject();	 }	 	 /**	 * metodo para agregar filtro	 * @params { string | string } clave , valor	 * @return void	 */	 public function addFilter( $key = '' , $valor = NULL){		 		 $c = get_called_class();		 		 if( $key != '' ){			$mainframe = JFactory::getApplication();			$mainframe->setUserState( $c::FILTER_STATE . $key , $valor );		 }	 }	/**	 * API of the class	 * 	 * @return { void }	 */	protected function API(){				// Instance an object with defaults		$Object = new ComponentModelObject();				// Instance an object with args not ID		$args = array(				'attribue'	=> 'any'		);				$Object = new ComponentModelObject();		$Object->instance( $args );		$Object->save(); // saves a new item				//---------------		// Instance an object with args with the ID		// Result will be the model from DB merge the fields passed		$args = array(					'id' 		=> 1				,	'tema' 		=> 1				,	'titulo'		=> 'example'				,	'ruta' 		=> 'pdf_test.pdf'				,	'ano'		=> '2013'				,	'state'		=>	1 // state pusblished		);				$Object = new ComponentModelObject();		$Object->instance( $args );		$Object->save(); // It will update the object with the id		$Object->delete(); // It will delete the object with the id		// Instance an object with args with the ID				$Object = new ComponentModelObject( 1 );		// To get the objects with the table		$Object = new ComponentModelObject();		$object->getObjects();		// To get the objects with conditions		$wheres = array(			0 => ( object ) array(					'key' => 'id'				,	'value' => '3'				,	'condition' => '='				,	'glue' => 'AND'			)		);		$Object = new ComponentModelObject();		$Object->getObjects( $wheres );	}}?>