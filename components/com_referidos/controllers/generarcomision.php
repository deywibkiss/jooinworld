<?php defined( '_JEXEC' ) or die( 'Restricted access' ); jimport( 'joomla.application.component.controller' ); class ReferidosControllerGenerarComision extends JController{		/**	* metodo para generar las comisiones del plan del usuario	* que se acaba de renovar	*/	public function generarComision(){				$planuser = JRequest::getInt( 'planuser' );		$model_planuser = $this->getModel( 'userplan' );				/*obtengo una instancia del plan del usuario 		* con el que se va a comisionar		*/		$model_planuser->instance( $planuser );				if( is_numeric( $model_planuser->id_user_plan ) ){						$this->setComisionesUser( $model_planuser );			return;		}			}		/**	* metodo que establece las comisiones	* @param { object } objeto de plan de usuario	* @return { void }	*/	protected function setComisionesUser( $planuser ){				if( !is_object($planuser) )			return;				$model_user = $this->getModel( 'user' );		$add_comisiones_user = array();				$model_user->instance( (int) $planuser->id_user );					$wheres_user = array(			0 => ( object )array(					'key' => 'block'				,	'condition' => ' <> '				,	'value' => '1'				,	'glue' => ''			)		);		$inf_user = $model_user->getUserInf( $wheres_user );				$wheres_plan = array(			0 => ( object ) array(					'key' => 'a.id_user_plan'				,	'condition' => ' = '				,	'value' => $planuser->id_user_plan				,	'glue' => 'AND'			)			,			1 => ( object )array(					'key' => 'a.estado_plan'				,	'condition' => ' = '				,	'value' => '1'				,	'glue' => ''			)						);				$params_plan = array(			'load' => 'loadObject'		);		$plan = $model_user->getUserPlanes( $wheres_plan , $params_plan);				//si el suario esta activo sigo con la comisiÃ³n		if( !empty($inf_user) && !empty($plan) ){						if( !isset( $add_comisiones_user[ 'valorcomi' ] ) )				$add_comisiones_user[ 'valorcomi' ] = array();									if( !isset( $add_comisiones_user[ 'referidosuser' ] ) )				$add_comisiones_user[ 'referidosuser' ] = array();							//consulto los referidos del usuario ligados al plan			$model_referido = $this->getModel( 'referido' );						$wheres_referido = array(				0 => (object) array(						'key' => 'id_user_plan'					,	'condition' => ' = '					,	'value' => $plan->id_user_plan					,	'glue' => 'AND'				)				,				1 => (object) array(						'key' => 'estado_ref'					,	'condition' => ' = '					,	'value' => '0'					,	'glue' => 'AND'				)				,				2 => (object) array(						'key' => 'forcomision'					,	'condition' => ' = '					,	'value' => '0'					,	'glue' => ''				)			);			$referidos_user = $model_referido->getObjects( $wheres_referido );						//obtener el valor de la comision por cada referido			foreach( $referidos_user as $key=>$referido ){								array_push( $add_comisiones_user[ 'valorcomi' ] , (float) $plan->valor_pesos );					 				array_push( $add_comisiones_user[ 'referidosuser' ] , $referido->id_referidos_user );	 							}			unset( $referido );		}				//creo un registro de comision general y por usuario		if( count($add_comisiones_user) ){						$model_comisiongen = $this->getModel( 'comisiongeneral' );			$total_comision = 0.0;						//obtengo la ultima comision generada			$wheres = array(				0 => ( object ) array(						'key' => ' 1 '					,	'condition' => 'ORDER BY num_comision DESC'					,	'value' => ' LIMIT 1'					,	'glue' => ''					)			);			$utl_comision = $model_comisiongen->getObjects( $wheres );			$next_comision = ( ((int) $utl_comision[ 0 ]->num_comision ) + 1);			$fecha_inicia = $utl_comision[ 0 ]->fecha_termina;			$fecha_termina = date( 'Y-m-d H:i:s' );						//var_dump( $add_comisiones_user ); die;						//sumo las comisiones de todos los usuarios del plan			if( count($add_comisiones_user[ 'valorcomi' ]) ){								$total_comision = array_sum( $add_comisiones_user[ 'valorcomi' ] ) ;			}						$args = array(					'id_comision' => NULL				,	'estado_pago' => '0'				,	'fecha_inicia' => $fecha_inicia				,	'fecha_termina' => $fecha_termina				,	'valor_total' => $total_comision				,	'num_comision' => $next_comision				,	'fecha_genera' => date( 'Y-m-d H:i:s' ) 			);			$model_comisiongen->instance( $args );						if( $model_comisiongen->save( 'bool' ) ){								//creo la comision del plan del usuario				$model_comi_user = $this->getModel( 'comision' );								$args_comi_user = array(						'id_user_comision' => NULL					,	'estado_pago' => '0'					,	'id_user_plan' => $plan->id_user_plan					, 	'valor_comision' => $total_comision					,	'fecha_corte' => $fecha_termina					,	'id_comi_gen' => $model_comisiongen->insertId				);				$model_comi_user->instance( $args_comi_user );				if( $model_comi_user->save( 'bool' ) ){					//se actualiza el estado ya en comisiÃ³n de los referidos					foreach( $add_comisiones_user[ 'referidosuser' ] as $pos=>$refuser ){						$model_referidouser = $this->getModel( 'referido' ); 												$params = array(								'id_referidos_user' => $refuser							,	'estado_ref' => '1'							,	'forcomision' => '1'						);												$model_referidouser->instance( $params );						$model_referidouser->save();					}					unset($refuser);									}								//enviar correo al administrador indicando que se genero un corte				$model_confcomision = $this->getModel( 'confcomision' ); 								$wheres_confcomi = array(						'key' => ' 1 '					,	'condition' => ' LIMIT '					,	'value' => '0 , 1'					,	'glue' => ''				);				$reg_conf = $model_confcomision->getObjects( $wheres_confcomi );				if( count($reg_conf) )					$idconf = $reg_conf[ 0 ]->id;									$model_confcomision->instance( $idconf );				if( !empty($model_confcomision) ){					$params = array(							'fecha_inicia' => $fecha_inicia						,	'fecha_termina' => $fecha_termina					);					$model_confcomision->sendMailAdmin( $params );				}			}		}		return;	}}