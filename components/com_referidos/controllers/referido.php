<?php defined( '_JEXEC' ) or die( 'Restricted access' );  jimport( 'joomla.application.component.controller' ); class ReferidosControllerReferido extends JController{	/*	* almacenar referidos a los usuarios v.i.p.	* @param void	* @return void	*/	public function saveReferido(){				$invitacion = JRequest::getInt( 'invitacion' );		$iduser = JRequest::getVar( 'iduser');//usuario invitado		$orden = JRequest::getVar( 'orden');		$model_invitado = $this->getModel( 'invitado' );		$model_referido = $this->getModel( 'referido' );		$model_orden = $this->getModel( 'ordenplan' );				//obtengo una isntancia de la orden que el invitado acaba de generar		$model_orden->instance( (int) $orden );				//instancio la clase invitacion		$model_invitado->instance( $invitacion );				//instancia de la clase user para obtener el usuario invitado		$model_userref = $this->getModel( 'user' );		$model_userref->instance( (int) $iduser );		$inf_userref = $model_userref->getUserInf();		if( !empty($inf_userref) ){			foreach( $inf_userref as $attr=>$valor ){				$model_userref->$attr = $valor;			}			unset($valor);		}				//instancia de la clase user para obtener el usuario que invito		$model_userinvt = $this->getModel( 'user' );		$model_userinvt->instance( (int) $model_invitado->id_user );		$inf_userinvt = $model_userinvt->getUserInf();		if( !empty($inf_userinvt) ){			foreach( $inf_userinvt as $attr=>$valor ){				$model_userinvt->$attr = $valor;			}			unset($valor);		}				$params_insert = array(				'user_invitado' => $model_userref			,	'user_invito' => $model_userinvt		);		//almaceno el referido para el usuario que invito		$this->insertReferido( $model_orden ,  $model_userinvt , '1' , $params_insert);						//obtengo los usuarios que han referido a la persona que invito		$wheres_backinvt = array(			0 => (object) array(					'key' => 'id_referido'				,	'condition' => ' = '				,	'value' => $model_userinvt->userid				,	'glue' => ''			)		);		$model_backinvt = $this->getModel( 'referido' );		$backinvt = $model_referido->getObjects( $wheres_backinvt );				foreach( $backinvt as $key=>$backuser ){						$model_backplan = $this->getModel( 'userplan' );			$model_backplan->instance( (int) $backuser->id_user_plan );						$model_backuser = $this->getModel( 'user' );			$model_backuser->instance( (int) $model_backplan->id_user );			$inf_backuser = $model_backuser->getUserInf();			if( !empty($inf_backuser) ){				foreach( $inf_backuser as $attr=>$valor ){					$model_backuser->$attr = $valor;				}				unset($valor);			}						//almaceno el referido			$this->insertReferido( $model_orden ,  $model_backuser , '2' , $params_insert , (int) $backuser->id_user_plan, (int) $backuser->nivel );		}				$this->setRedirect( JRoute::_( 'index.php' , false) );		return;	}		/**	* metodo que procesa el guardado del referido para un usuario	* @param { object } la orden con la que el referido hizo la compra del plan	* @param { object } el usuario en el que se asociara como referido	* @param { string | int } directo = 1 ; indirecto = 0	* @param { array } un array de objetos , usuario invitado y usuario invito	* @param { int } id del planuser al que lo asociara, esto para referido indirecto	* @param { int } nivel de la matriz del plan a que pertenecera, esto para referido indirecto	* @return void;	*/	protected function insertReferido( $model_orden , $model_userinvt , $directo = '' , $params_insert = array() , $id_back_plan = 0 , $nivel_invt = 0){				// si los valores pasados como parametros no son los que se requieren, no sigue el flujo		if( !is_object($model_orden) || !is_object($model_userinvt) || !is_numeric( $directo ) || empty($params_insert) )			return;					$nivelmatriz = NULL;					$wheres_planesinvt = array(			0 => ( object )array(					'key' => 'b.estado_activo'				,	'condition' => ' = '				,	'value' => '1'				,	'glue' => 'AND'			)			,			1 => ( object )array(					'key' => 'a.estado_plan'				,	'condition' => ' <> '				,	'value' => '0'				,	'glue' => 'AND'			)			,			2 => ( object )array(					'key' => 'a.id_plan'				,	'condition' => ' = '				,	'value' => $model_orden->id_plan				,	'glue' => ''			)		);				/* cuando el referido va ha ser indirecto se selecciona		*  el mismo plan con el que la persona que invito fue referida		*/		if( is_numeric( $id_back_plan ) && $id_back_plan > 0)		{			array_push( $wheres_planesinvt , 					(object) array(							'key' => 'a.id_user_plan'						,	'condition' => ' = '						,	'value' => $id_back_plan						,	'glue' => ''					)				);							$nivelmatriz = ( $nivel_invt > 0 && is_numeric($nivel_invt) ) ? $nivel_invt : NULL;		}				$params = array(			'order' => 'a.fecha_adquiere ASC'		);				$planes_userinvt = $model_userinvt->getUserPlanes( $wheres_planesinvt , $params );				//los planes del usuario que cumplan la condicion, compruebo su estado de la matriz		foreach( $planes_userinvt as $key=>$plan){						//consulta a los referidos que estan en el plan del usuario			$wheres_refplan = array(				0 => (object) array(						'key' => 'id_user_plan'					,	'condition' => '='					,	'value' => $plan->id_user_plan					,	'glue' => ''				)				,				1 => (object) array(						'key' => ' ORDER BY '					,	'condition' => 'id_user_plan, nivel ASC'					,	'value' => ''					,	'glue' => ''				)			);			$model_refplan = $this->getModel( 'referido' );			$refplan = $model_refplan->getObjects( $wheres_refplan );						$personas_nivel = (int) $plan->personas_nivel;			$niveles = (int) $plan->niveles;									$planes_userinvt[ $key ]->per_niveles = array();			$planes_userinvt[ $key ]->per_permite = array();			$per_pow = 0;			for( $i=0; $i < $niveles ; $i++){								$planes_userinvt[ $key ]->per_niveles[ 'nivel'.($i+1) ] =  0;								if( $per_pow <= 0 ){ 					$planes_userinvt[ $key ]->per_permite[ 'nivel'.($i+1) ] = $per_pow = $personas_nivel; 				}else{					 $per_pow = pow( $per_pow , 2 ); 					 $planes_userinvt[ $key ]->per_permite[ 'nivel'.($i+1) ] = $per_pow;				}			}			//recorro los referidos del plan y compruebo en que nivel de la matriz estan			foreach( $refplan as $pos=>$ref ){								for( $i=0 ; $i < $niveles ; $i++ ){										if( $ref->nivel == ($i+1) ){												$planes_userinvt[ $key ]->per_niveles[ 'nivel'.($i+1) ] += 1; 					}				}			}			unset( $ref );					}		unset($plan);				//almacenar el referido y se comprueba a que plan quedara ligado		foreach( $planes_userinvt as $key=>$plan ){						$continua = true;						foreach( $plan->per_niveles as $pos=>$nivel_pers ){								/* cuando el referido va ha ser indirecto se selecciona				*  el mismo plan con el que la persona que invito fue referida				*/				$nivel = ( (int) str_ireplace( 'nivel' , '' , $pos) );				if( !is_null( $nivelmatriz ) && $nivel == $nivelmatriz )				{					$model_referido = $this->getModel( 'referido' );										$estado_ref = '1';									if( $plan->estado_plan == 2 && $plan->fecha_vencio != '0000-00-00 00:00:00' )						$estado_ref = '0';										$args = array(							'id_referidos_user' => NULL						,	'estado_ref' => $estado_ref							,	'id_user_plan' => $plan->id_user_plan						,	'id_referido' => $params_insert[ 'user_invitado' ]->userid						,	'fecha_registro' => date( 'Y-m-d H:i:s' )						,	'id_referido_por' => $params_insert[ 'user_invito' ]->userid						,	'directo' => $directo						,	'nivel' => $nivel+1						,	'forcomision' => '0'						,	'tipo_plan' => '1'					);										$model_referido->instance( $args );					if( $model_referido->save( 'bool' ) ){						$continua = false;						break;						}									}elseif( $nivel_pers <  $plan->per_permite[ $pos ] && is_null( $nivelmatriz ) ){					$model_referido = $this->getModel( 'referido' );										$estado_ref = '1';										if( $plan->estado_plan == 2 && $plan->fecha_vencio != '0000-00-00 00:00:00' )						$estado_ref = '0';										$args = array(							'id_referidos_user' => NULL						,	'estado_ref' => $estado_ref							,	'id_user_plan' => $plan->id_user_plan						,	'id_referido' => $params_insert[ 'user_invitado' ]->userid						,	'fecha_registro' => date( 'Y-m-d H:i:s' )						,	'id_referido_por' => $params_insert[ 'user_invito' ]->userid						,	'directo' => $directo						,	'nivel' => (int) str_ireplace( 'nivel' , '' , $pos)						,	'forcomision' => '0'						,	'tipo_plan' => '1'					);										$model_referido->instance( $args );					if( $model_referido->save( 'bool' )){						$continua = false;						break;					}				}			}			unset($nivel_pers);						if(!$continua)				break;		}		unset($plan);					return;	}		/*	* Recupero los referidos del usuario	* @param void	* @return void	*/	public function getReferido(){				$model = $this->getModel( 'referido' );		$result = ( object ) array();				$model->getObject( 1 ); 	}		/*	* Recupero los referidos del usuario	* @param void	* @return void	*/	public function miembrosMatriz(){						$model_referido = $this->getModel( 'referido' );			$user = $this->getUser();						$response = ( object ) array();						$wheres = array(				0 => ( object ) array(						'key' => 'b.id_user'					,	'condition' => ' = '					,	'value' => $user->get( 'id' )					,	'glue' => ' AND '				)				,				1 => ( object ) array(						'key' => '( a.directo'					,	'condition' => ' = '					,	'value' => '1'					,	'glue' => ' OR '				)				,				2 => ( object ) array(						'key' => 'a.id_referido_por'					,	'condition' => ' IS NULL '					,	'value' => ')'					,	'glue' => ''				)			);						$params = array(					'load' => 'loadObjectList'				,	'order' => 'c.name ASC'				);						$ref_directos = $model_referido->getReferidosAll( $wheres , $params );						if( $ref_directos ){								$response->directos = $ref_directos;				$response->message = "";			}									$wheres_other = array(				0 => ( object ) array(						'key' => 'b.id_user'					,	'condition' => ' = '					,	'value' => $user->get( 'id' )					,	'glue' => ' AND '					)				,				1 => ( object ) array(						'key' => '( a.directo'					,	'condition' => ' = '					,	'value' => '2'					,	'glue' => ' OR '				)				,				2 => ( object ) array(						'key' => 'a.id_referido_por'					,	'condition' => ' IS NOT NULL '					,	'value' => ')'					,	'glue' => ''				)			);						$params_other = array(					'load' => 'loadObjectList'				,	'order' => 'c.name ASC'				);						$ref_indirectos = $model_referido->getReferidosAll( $wheres_other , $params_other );						if( $ref_indirectos )				$response->indirectos = $ref_indirectos;										}	/*	* obtener info del referido	*/	public function	getReferidoInfo(){				$model_ref = $this->getModel( 'referido' );		$idref = JRequest::getInt( 'idref' );				$model_ref->instance( $idref );		$inf_ref = $model_ref->getReferidoInf();				if( !empty($inf_ref) ){						$model_ref		}			}	}