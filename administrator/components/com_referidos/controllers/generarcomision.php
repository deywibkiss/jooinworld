<?php defined( '_JEXEC' ) or die( 'Restricted access' ); jimport( 'joomla.application.component.controller' ); class ReferidosControllerGenerarComision extends JController{		/**	* metodo para generar las comisiones de los usuarios calculando la fecha	* de corte	*	*/	public function generarComision(){		$model_comisiongen = $this->getModel( 'comisiongeneral' );		$model_comision = $this->getModel( 'comision' );				//obtengo la ultima comision generada		$wheres = array(			0 => ( object ) array(					'key' => ' 1 '				,	'condition' => 'ORDER BY num_comision DESC'				,	'value' => ' LIMIT 1'				,	'glue' => ''				)		);		$utl_comision = $model_comisiongen->getObjects( $wheres );		$fecha_termina = $utl_comision[ 0 ]->fecha_termina;				//obtener la configiracion		$conf_comision = $model_comision->getConfComision();				//corte primer periodo 		$diacorte1 = $conf_comision->dia_corte; $semama_corte1 = $conf_comision->semana_corte;			//corte segundo periodo			$diacorte2 = $conf_comision->dia_corte2; $semama_corte2 = $conf_comision->semana_corte2;				//obtengo el numero de las semanas del mes actual		$num_semanas = $this->getNumSemanas();				//calculo la primera fecha de corte siguiente		$next_corte1 = $this->calculaNextDate( $num_semanas , $semama_corte1 , $diacorte1);				//calculo la segunda fecha de corte siguiente		$next_corte2 = $this->calculaNextDate( $num_semanas , $semama_corte2 , $diacorte2);				//comparo las fechas		$fecha_corte = '';		if( strtotime( $next_corte1 ) <= time() && strtotime( $next_corte1 ) > strtotime( $fecha_termina ) ){						$fecha_corte = $next_corte1;					}elseif( strtotime( $next_corte2 ) <= time() && strtotime( $next_corte2 ) > strtotime( $fecha_termina ) ){						$fecha_corte = $next_corte2;		}						if( strlen( $fecha_corte ) > 10 ){						$this->setComisionesUser( $fecha_corte );			return;		}else{			//echo 'No ha llegado la fecha de corte';			return;		}			}		/**	* metodo para calcular la fechas siguientes de corte, y de pago	* @param { array } array con los numeros de la semana del mes	* @param { int } numero de la posicion de la semana del mes	* @param { int } numero del dia contando que Lunes = 1 y Domingo = 7  	* @return date/string	*/	protected function calculaNextDate( $numSemanas , $semana_per , $dia_per ){		//calcula la primera fecha de corte		$anio_act = date( 'Y' );		$mes_act = date( 'm' );				$fecha = date( 'Y-m-d H:m:i', strtotime( "$anio_act-W".$numSemanas[ $semana_per-1 ]."-".$dia_per ) );		$mes = date( 'm', strtotime( "$anio_act-W".$numSemanas[ $semana_per-1 ]."-".$dia_per ) );		if( $mes != $mes_act )			$fecha = date( 'Y-m-d H:m:i', strtotime( "$anio_act-W".$numSemanas[ $semana_per ]."-".$dia_per ) );					return $fecha;		}		/**	* metodo para obtener la siguiente fecha de corte	* @return { array } array con los numeros de la semana	*/	protected function getNumSemanas(){				$Utilities = 'Misc';		$anio_act = date( 'Y' );		$mes_act = date( 'm' );				//obtengo los numeros de las semanas, especificandole el mes y año		$numSemanas = $Utilities::getWeeksMonth( $anio_act , $mes_act );		foreach($numSemanas as $key=>$numsem){			if( strlen( strval( $numsem ) ) < 2 )				$numSemanas[ $key ] = '0'.$numsem;		}		unset( $numsem );				return $numSemanas;			}		/**	* metodo que establece las comisiones a los usuarios	* @param { date } fecha_corte de la ultima comison	* @return { void }	*/	protected function setComisionesUser( $fecha_termina ){				$model_user = $this->getModel( 'user' );				//obtengo los usuarios de jooinworld		$users = $model_user->getObjects();		$add_comisiones_user = array();				//recorro todos los usuarios para comprobar su estado		foreach( $users as $key=>$user ){						$wheres_user = array(				0 => ( object )array(						'key' => 'block'					,	'condition' => ' <> '					,	'value' => '1'					,	'glue' => ''				)			);			$inf_user = $user->getUserInf( $wheres_user );						//si el suario esta activo sigo con la comprobacion			if( !empty($inf_user) ){								$wheres_planes = array(					0 => (object) array(							'key' => 'a.estado_plan'						,	'condition' => ' = '						,	'value' => '1'						,	'glue' => ''					) 				);				$user_planes = $user->getUserPlanes( $wheres_planes );								//si el usuario tiene planes activos se sigue con la				//generacion de la comision				if( !empty( $user_planes ) ){										if( !isset( $add_comisiones_user[ $user->userid ] ) )							$add_comisiones_user[ $user->userid ] = $user;												if( !isset( $add_comisiones_user[ $user->userid ]->valorcomi ) )							//$add_comisiones_user[ $user->userid ]->valorcomi = array();														if( !isset( $add_comisiones_user[ $user->userid ]->iduserplan ) )							$add_comisiones_user[ $user->userid ]->iduserplan = array();														//se agrega a la clase del usurio la otro informacion					foreach( $inf_user as $attr=>$valor ){						$users[ $key ]->$attr = $valor;						$user->$attr = $valor;					}					unset( $valor );										//comprobar en los planes activos del usuario sus referidos					foreach( $user_planes as $pos=>$plan ){						//consulto los referidos del usuario						$model_referido = $this->getModel( 'referido' );												$wheres_referido = array(							0 => (object) array(									'key' => 'id_user_plan'								,	'condition' => ' = '								,	'value' => $plan->id_user_plan								,	'glue' => 'AND'							)							,							1 => (object) array(									'key' => 'estado_ref'								,	'condition' => ' = '								,	'value' => '1'								,	'glue' => 'AND'							)							,							2 => (object) array(									'key' => 'forcomision'								,	'condition' => ' = '								,	'value' => '0'								,	'glue' => ''							)						);						$referidos_user = $model_referido->getObjects( $wheres_referido );												foreach( $referidos_user as $clave=>$referido_user ){														if( !isset( $add_comisiones_user[ $user->userid ]->iduserplan[ $plan->id_user_plan ] ) )							{								$add_comisiones_user[ $user->userid ]->iduserplan[ $plan->id_user_plan ] = array();							 	$add_comisiones_user[ $user->userid ]->iduserplan[ $plan->id_user_plan ][ 'idplan' ] = $plan->id_user_plan;							}														if( !isset( $add_comisiones_user[ $user->userid ]->iduserplan[ $plan->id_user_plan ][ 'valorcomi' ] ) )								 $add_comisiones_user[ $user->userid ]->iduserplan[ $plan->id_user_plan ][ 'valorcomi' ] = array();														array_push( $add_comisiones_user[ $user->userid ]->iduserplan[ $plan->id_user_plan ][ 'valorcomi' ] , (float) $plan->valor_pesos );														if( !isset( $add_comisiones_user[ $user->userid ]->iduserplan[ $plan->id_user_plan ][ 'referidosuser' ] ) )								 $add_comisiones_user[ $user->userid ]->iduserplan[ $plan->id_user_plan ][ 'referidosuser' ] = array();								 							array_push( $add_comisiones_user[ $user->userid ]->iduserplan[ $plan->id_user_plan ][ 'referidosuser' ] , $referido_user->id_referidos_user );	 						}						unset( $referido_user );					}					unset( $plan );				}							}		}				//creo un registro de comision general y por usuario		if( count($add_comisiones_user) ){						$model_comisiongen = $this->getModel( 'comisiongeneral' );			$total_comision = 0.0;						//obtengo la ultima comision generada			$wheres = array(				0 => ( object ) array(						'key' => ' 1 '					,	'condition' => 'ORDER BY num_comision DESC'					,	'value' => ' LIMIT 1'					,	'glue' => ''					)			);			$utl_comision = $model_comisiongen->getObjects( $wheres );			$next_comision = ( ((int) $utl_comision[ 0 ]->num_comision ) + 1);			$fecha_inicia = $utl_comision[ 0 ]->fecha_termina;									//var_dump( $add_comisiones_user ); die;						//recorro todos los usuarios para obtener el valor de sus comisiones			foreach( $add_comisiones_user as $iduser=>$user ){								$valor_comisiones_user = 0.0;				foreach( $user->iduserplan as $pos=>$idplan ){					$valor_comisiones_user += array_sum( $idplan[ 'valorcomi' ] );				}								$total_comision += (float) $valor_comisiones_user;			}			unset( $user );						$args = array(					'id_comision' => NULL				,	'estado_pago' => '0'				,	'fecha_inicia' => $fecha_inicia				,	'fecha_termina' => $fecha_termina				,	'valor_total' => $total_comision				,	'num_comision' => $next_comision				,	'fecha_genera' => date( 'Y-m-d H:i:s' ) 			);			$model_comisiongen->instance( $args );						if( $model_comisiongen->save( 'bool' ) ){								//recorro los usuarios para almacenar los registros por plan de usuario				foreach( $add_comisiones_user as $iduser=>$user ){										foreach( $user->iduserplan as $key=>$iduserplan){						$model_comi_user = $this->getModel( 'comision' );												$args_comi_user = array(								'id_user_comision' => NULL							,	'estado_pago' => '0'							,	'id_user_plan' => $iduserplan[ 'idplan' ]							, 	'valor_comision' => array_sum( $iduserplan[ 'valorcomi' ] )							,	'fecha_corte' => $fecha_termina							,	'id_comi_gen' => $model_comisiongen->insertId						);						$model_comi_user->instance( $args_comi_user );						if( $model_comi_user->save( 'bool' ) ){							//se actualiza el estado ya en comisión de los referidos							foreach( $iduserplan[ 'referidosuser' ] as $pos=>$refuser ){								$model_referidouser = $this->getModel( 'referido' ); 																$params = array(										'id_referidos_user' =>$refuser									,	'forcomision' => '1'								);																$model_referidouser->instance( $params );								$model_referidouser->save();							}							unset($refuser);													}					}					unset( $iduserplan );									}				unset( $user );								//enviar correo al administrador indicando que se realizo un corte				$model_confcomision = $this->getModel( 'confcomision' ); 								$wheres_confcomi = array(						'key' => ' 1 '					,	'condition' => ' LIMIT '					,	'value' => '0 , 1'					,	'glue' => ''				);				$reg_conf = $model_confcomision->getObjects( $wheres_confcomi );				if( count($reg_conf) )					$idconf = $reg_conf[ 0 ]->id;									$model_confcomision->instance( $idconf );				if( !empty($model_confcomision) ){					$params = array(							'fecha_inicia' => $fecha_inicia						,	'fecha_termina' => $fecha_termina					);					$model_confcomision->sendMailAdmin( $params );				}			}		}	}}