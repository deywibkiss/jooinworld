<?php defined( '_JEXEC' ) or die( 'Restricted access' ); jimport( 'joomla.application.component.controller' ); class ReferidosControllerComision extends JController{		/**	* generar el recibo de pago	* @parmas void	* @return void	*/	public function generarReciboPago(){				$idcomision = JRequest::getInt( 'idcomi' );		$model_comision = $this->getModel( 'comisiongeneral' );		$model_comision->instance( $idcomision );			$consolidados = array();						if( !empty($model_comision) ){						//obtener las remisiones por usuario ligados a la comision general			$model_remision_user = $this->getModel( 'comision' );			$wheres_remi_user = array(				0 => (object) array(						'key' => 'id_comi_gen'					,	'condition' => ' = '					,	'value' => $model_comision->id_comision					,	'glue' => ''				)			);			$all_comi_user = $model_remision_user->getObjects( $wheres_remi_user );			//var_dump( $all_comi_user ); die;						//obtener los planes de usuario de las remisiones de usuarios			if( count( $all_comi_user ) ){								foreach( $all_comi_user as $key=>$comiuser ){					 					//instancio el plan del usuario					$model_userplan = $this->getModel( 'userplan' );					$model_userplan->instance( (int) $comiuser->id_user_plan );										//instancio el usuario					$model_user = $this->getModel( 'user' );					$model_user->instance( (int) $model_userplan->id_user );					$inf_user = $model_user->getUserInf();					if( !empty($inf_user) ){						foreach($inf_user as $attr=>$valor){							$model_user->$attr = $valor;						}					}										//creo posiciones en el array para cada id usuario, y agrego sus comisiones					if( !isset($consolidados[ $model_user->userid ]) )						$consolidados[ $model_user->userid ] = $model_user;															if( !isset( $consolidados[ $model_user->userid ]->comisionesuser ) )						$consolidados[ $model_user->userid ]->comisionesuser = array();											array_push( $consolidados[ $model_user->userid ]->comisionesuser , $comiuser );				}				unset( $remiuser );			}						$model_comision->usercomisiones = $consolidados;						$view = $this->getView( 'comisiones' , 'html' );			$view->assignRef( 'comision_excel' , $model_comision);			$view->setLayout( 'generarpagos' );			$view->display();			return;		}				$this->setRedirect( JRoute::_( 'index.php?option=com_referidos&view=comisiones' , false) , 'No se pudo generar el recibo de pago' , 'advertisement');		return;	}		/**	* cambiar el estado de las comisiones a pagadas	*	*/	public function setPago(){				$id_comisiongen = JRequest::getInt( 'id' );		$model_comisiongen = $this->getModel( 'comisiongeneral' );		$model_comision = $this->getModel( 'comision' );				//cambiar el estado de la comision general a pagado		$args = array(				'id_comision' => $id_comisiongen			,	'estado_pago' => '1'			,	'fecha_pago' => date( 'Y-m-d H:i:s' )		);		$model_comisiongen->instance( $args );				if( $model_comisiongen->save( 'bool' ) ){						$wheres_comiuser = array(				0 => ( object )array(						'key' => 'id_comi_gen'					,	'condition' => ' = '					,	'value' => $id_comisiongen					,	'glue' => ''				)			);			$comisiones_users = $model_comision->getObjects( $wheres_comiuser );						/*			* cambiar el estado de las comisiones de los usuarios que estan ligadas			* a la comision general			*/			if( count($comisiones_users) ){				foreach( $comisiones_users as $key=>$comiuser ){										$model_comiuser = $this->getModel( 'comision' );					$args_comiuser = array(							'id_user_comision' => $comiuser->id_user_comision						,	'estado_pago' => '1'						,	'fecha_pago' => date( 'Y-m-d H:i:s' ) 					);					$model_comiuser->instance( $args_comiuser );					$model_comiuser->save();				}				unset( $comiuser );			}		}				return;	}			/**	* comisiones no pagadas, incluso las de los planes vencidos	*/	protected function getNoPagas( $iduser ){				$model_user = $this->getModel( 'user' );		$model_user->instance( $iduser );				$wheres_plan = array(			0 => ( object ) array(					'key' => 'a.estado_plan'				,	'condition' => ' <> '				,	'value' => '0'				,	'glue' => ''			) 		);		$planes = $model_user->getUserPlanes( $wheres_plan );				$id_planes_user = array();		foreach( $planes as $key=>$plan){			$id_planes_user[] = $plan->id_user_plan;		}		unset( $plan );				$wheres = array(			0 => ( object ) array(					'key' => 'id_user_plan'				,	'condition' => ' IN'				,	'value' => '('. implode( ',' , $id_planes_user) .')'				,	'glue' => ' AND '				)			,			1 => ( object ) array(					'key' => 'estado_pago'				,	'condition' => ' = '				,	'value' => '0'				,	'glue' => ''				)					);		$model_comision = $this->getModel( 'comision' );		$no_pagadas = $model_comision->getObjects( $wheres );		return $no_pagadas;	}		/**	* total de comisiones pagadas, todos los estados de los planes	*/	protected function getPagas( $iduser ){				$model_user = $this->getModel( 'user' );		$model_user->instance( $iduser );				$wheres_plan = array(			0 => ( object ) array(					'key' => 'a.estado_plan'				,	'condition' => ' <> '				,	'value' => '0'				,	'glue' => ''			) 		);		$planes = $model_user->getUserPlanes( $wheres_plan );				$id_planes_user = array();		foreach( $planes as $key=>$plan){			$id_planes_user[] = $plan->id_user_plan;		}		unset( $plan );				$wheres = array(			0 => ( object ) array(					'key' => 'id_user_plan'				,	'condition' => ' IN'				,	'value' => '('. implode( ',' , $id_planes_user) .')'				,	'glue' => ' AND '				)			,			1 => ( object ) array(					'key' => 'estado_pago'				,	'condition' => ' = '				,	'value' => '1'				,	'glue' => ''				)					);		$model_comision = $this->getModel( 'comision' );		$pagadas = $model_comision->getObjects( $wheres );		return $pagadas;	}		/**	* obtengo las comisiones de un usuario	*/	public function getComisionesUser(){				$userid = JRequest::getVar( 'data' );		$model_comisionuser = $this->getModel( 'comision' );		$conf_comision = $model_comisionuser->getConfComision();				$model_user = $this->getModel( 'user' );		$model_user->instance( (int) $userid );		$inf_user = $model_user->getUserInf();		if( !empty($inf_user) ){			foreach( $inf_user as $attr=>$valor ){				$model_user->$attr = $valor;			}			unset($valor);		}				$response = ( object ) array();				$response->objuser = $model_user;				//corte primer periodo 		$diacorte1 = $conf_comision->dia_corte; $semama_corte1 = $conf_comision->semana_corte;			//corte segundo periodo			$diacorte2 = $conf_comision->dia_corte2; $semama_corte2 = $conf_comision->semana_corte2;				//pago primer periodo 		$diapago1 = $conf_comision->dia_pago; $semana_pago1 = $conf_comision->semana_pago;		//pago segundo periodo		$diapago2 = $conf_comision->dia_pago2; $semana_pago2 = $conf_comision->semana_pago2;				//obtengo las comisiones no pagadas del usuario		$nopagadas = $this->getNoPagas( $userid );		$response->nopagadas = $nopagadas;				//obtengo las comisiones pagadas del usuario		$pagadas = $this->getPagas( $userid );		$response->pagadas = $pagadas;				$response->comosionesall = array_merge( $nopagadas , $pagadas );				//obtengo los numeros de las semanas del mes		$numSemanas = $this->getNumSemanas();				//calcula la primera fecha de corte		$fecha_corte1 = $this->calculaNextDate( $numSemanas , $semama_corte1 , $diacorte1 );				//calcula la segunda fecha de corte		$fecha_corte2 = $this->calculaNextDate( $numSemanas , $semama_corte2 , $diacorte2 );							//calcular la proxima fecha de corte		if( strtotime( $fecha_corte1 ) > time() ){						$fecha_corte = $fecha_corte1;		}		elseif( strtotime( $fecha_corte2 ) > time() ){						$fecha_corte = $fecha_corte2;		}		else{						$fecha_corte = date( 'Y-m-d H:m:i' , strtotime( $fecha_corte1 .' +1 month' ) );		}		$response->fechacorte = date( 'Y/m/d' , strtotime( $fecha_corte ) );				//calcula la primera fecha de pago		$fecha_pago1 = $this->calculaNextDate( $numSemanas , $semana_pago1 , $diapago1 ); 					//calcula la segunda fecha de pago		$fecha_pago2 = $this->calculaNextDate( $numSemanas , $semana_pago2 , $diapago2 ); 				//calcular la proxima fecha de pago		if( strtotime( $fecha_pago1 ) > time() ){						$fecha_pago = $fecha_pago1;		}		elseif( strtotime( $fecha_pago2 ) > time() ){						$fecha_pago = $fecha_pago2;		}		else{						$fecha_pago = date( 'Y-m-d H:m:i' , strtotime( $fecha_pago1 .' +1 month' ) );		}		$response->fechapago = date( 'Y/m/d' , strtotime( $fecha_pago ) );				$response->status = 200;				echo json_encode( $response );		die;			}		/**	* metodo para calcular la fechas siguientes de corte, y de pago	* @param { array } array con los numeros de la semana del mes	* @param { int } numero de la posicion de la semana del mes	* @param { int } numero del dia contando que Lunes = 1 y Domingo = 7 	* @return date/string 	*/	protected function calculaNextDate( $numSemanas , $semana_per , $dia_per ){		//calcula la primera fecha de corte		$anio_act = date( 'Y' );		$mes_act = date( 'm' );				$fecha = date( 'Y-m-d H:m:i', strtotime( "$anio_act-W".$numSemanas[ $semana_per-1 ]."-".$dia_per ) );		$mes = date( 'm', strtotime( "$anio_act-W".$numSemanas[ $semana_per-1 ]."-".$dia_per ) );		if( $mes != $mes_act )			$fecha = date( 'Y-m-d H:m:i', strtotime( "$anio_act-W".$numSemanas[ $semana_per ]."-".$dia_per ) );					return $fecha;		}		/**	* metodo para obtener la siguiente fecha de corte	* @return { array } array con los numeros de la semana	*/	protected function getNumSemanas(){				$Utilities = 'Misc';		$anio_act = date( 'Y' );		$mes_act = date( 'm' );				//obtengo los numeros de las semanas, especificandole el mes y aÃ±o		$numSemanas = $Utilities::getWeeksMonth( $anio_act , $mes_act );		foreach($numSemanas as $key=>$numsem){			if( strlen( strval( $numsem ) ) < 2 )				$numSemanas[ $key ] = '0'.$numsem;		}		unset( $numsem );				return $numSemanas;			}	}